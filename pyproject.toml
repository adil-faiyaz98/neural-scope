[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neural-scope"
dynamic = ["version"]
description = "Advanced analysis tools for machine learning models and data"
readme = "README.md"
authors = [
  { name="Adil Faiyaz", email="adilmd98@gmail.com" }
]
license = {text = "MIT"}
requires-python = ">=3.7"
dependencies = [
  "numpy>=1.19.0",
  "pandas>=1.1.0",
  "matplotlib>=3.3.0",
  "scikit-learn>=0.23.0",
  "psutil>=5.8.0",
  "memory-profiler>=0.58.0",
  "pyyaml>=5.4.0"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules"
]

[project.urls]
"Homepage" = "https://github.com/adil-faiyaz98/neural-scope"
"Bug Tracker" = "https://github.com/adil-faiyaz98/neural-scope/issues"
"Documentation" = "https://neural-scope.readthedocs.io/"

[project.scripts]
neural-scope = "advanced_analysis.cli:main"

[project.optional-dependencies]
pytorch = ["torch>=1.7.0"]
tensorflow = ["tensorflow>=2.4.0"]
visualization = ["plotly>=4.14.0", "dash>=1.19.0", "seaborn>=0.11.0"]
distributed = ["dask>=2.0.0", "ray>=1.0.0"]
compression = ["tensorflow-model-optimization>=0.5.0"]
dev = [
  "pytest>=6.0.0",
  "pytest-cov>=2.10.0",
  "black>=20.8b1",
  "flake8>=3.8.0",
  "mypy>=0.800",
  "bandit>=1.7.0",
  "safety>=1.10.0"
]
docs = [
  "sphinx>=3.4.0",
  "sphinx-rtd-theme>=0.5.0",
  "sphinx-autodoc-typehints>=1.11.0"
]
all = [
  "torch>=1.7.0",
  "tensorflow>=2.4.0",
  "plotly>=4.14.0",
  "dash>=1.19.0",
  "seaborn>=0.11.0",
  "dask>=2.0.0",
  "ray>=1.0.0",
  "tensorflow-model-optimization>=0.5.0"
]

[tool.black]
line-length = 88
target-version = ["py37", "py38", "py39", "py310"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=advanced_analysis --cov-report=term-missing --cov-report=xml"

[tool.coverage.run]
source = ["advanced_analysis"]
omit = ["tests/*", "docs/*", "examples/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101"]
